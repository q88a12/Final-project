- hosts: all
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Install common packages
      apt:
        name:
          - wget
          - curl
          - python3-pip
          - software-properties-common
          - apt-transport-https
          - ca-certificates
          - gnupg
        state: present
        update_cache: yes

    - name: Install Node Exporter
      unarchive:
        src: ./files/node_exporter-1.8.2.linux-amd64.tar.gz
        dest: /usr/local/
        remote_src: yes
    - name: Create symlink for Node Exporter
      file:
        path: /usr/local/bin/node_exporter
        state: link
        dest: /usr/local/node_exporter-1.8.2.linux-amd64/node_exporter 

    - name: Create Node Exporter service file
      copy:
        content: |
          [Unit]
          Description=Node Exporter
          After=network.target

          [Service]
          User=nobody
          Group=nobody
          Type=simple
          ExecStart=/usr/local/bin/node_exporter --web.listen-address=:9101 # Изменен порт

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/node_exporter.service

    - name: Enable and start Node Exporter service
      systemd:
        name: node_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Allow necessary ports (UFW)
      ufw:
        rule: allow
        port: "{{ item }}"
        proto: tcp
      loop: "{{ firewall_ports }}"

    - name: Copy Filebeat deb file
      copy:
        src: ./files/filebeat-8.15.1-amd64.deb
        dest: /tmp/

    - name: Install Filebeat
      apt:
        deb: /tmp/filebeat-8.15.1-amd64.deb
      register: filebeat_install
      failed_when: filebeat_install.rc != 0

    - name: Display Filebeat installation error
      debug:
        msg: "Failed to install Filebeat: {{ filebeat_install.msg }}"
      when: filebeat_install is failed

    - name: Configure Filebeat
      copy:
        content: |
          filebeat.inputs:
          - type: file
            enabled: true
            paths:
            - /var/log/nginx/access.log 
            - /var/log/nginx/error.log
            - /var/log/apache2/access.log
            - /var/log/apache2/error.log
            - /var/log/mysql/*.log

          output.elasticsearch:
            hosts: ["{{ remote_pc }}:9200"]

          processors:
            - add_host_metadata:
                when.not.contains.tags: forwarded
        dest: /etc/filebeat/filebeat.yml
      when: filebeat_install is succeeded
      notify: Restart Filebeat

    - name: Enable and start Filebeat service
      systemd:
        name: filebeat
        enabled: yes
        state: started
      when: filebeat_install is succeeded

# Установка и настройка Elasticsearch, Kibana и Logstash
- hosts: remote_pc
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Copy Elasticsearch deb file
      copy:
        src: ./files/elasticsearch-8.15.1-amd64.deb
        dest: /tmp/

    - name: Install Elasticsearch
      apt:
        deb: /tmp/elasticsearch-8.15.1-amd64.deb

    - name: Configure Elasticsearch (Single Node)
      copy:
        content: |
          network.host: 0.0.0.0
          http.port: 9200
          cluster.name: my-elk-cluster 
          node.name: elk-node-1 
          discovery.type: single-node 
        dest: /etc/elasticsearch/elasticsearch.yml

    - name: Copy Kibana deb file
      copy:
        src: ./files/kibana-8.15.1-amd64.deb
        dest: /tmp/

    - name: Install Kibana
      apt:
        deb: /tmp/kibana-8.15.1-amd64.deb

    - name: Configure Kibana
      copy:
        content: |
          server.port: 5601
          server.host: "0.0.0.0"
          elasticsearch.hosts: ["http://{{ remote_pc }}:9200"] # Исправлен адрес Elasticsearch
        dest: /etc/kibana/kibana.yml

    - name: Copy Logstash deb file
      copy:
        src: ./files/logstash-8.15.1-amd64.deb
        dest: /tmp/

    - name: Install Logstash
      apt:
        deb: /tmp/logstash-8.15.1-amd64.deb

    - name: Configure Logstash
      copy:
        content: |
          input {
            beats {
              port => 5044
            }
          }

          filter {
            grok {
              match => { "message" => "%{COMBINEDAPACHELOG}" } # Проверьте соответствие формата логов
            }
            date {
              match => [ "timestamp" , "dd/MMM/yyyy:HH:mm:ss Z" ]
            }
            geoip {
              source => "clientip"
            }
          }

          output {
            elasticsearch {
              hosts => ["localhost:9200"]
              index => "%{[@metadata][beat]}-%{+YYYY.MM.dd}"
            }
          }
        dest: /etc/logstash/conf.d/logstash.conf

    - name: Start Elasticsearch service
      service:
        name: elasticsearch
        state: started
        enabled: true

    - name: Start Kibana service
      service:
        name: kibana
        state: started
        enabled: true

    - name: Start Logstash service
      service:
        name: logstash
        state: started
        enabled: true

# Установка и настройка Prometheus
- hosts: remote_pc
  become: true
  vars_files:
    - vars.yml

  tasks:
    - name: Copy Prometheus deb file
      copy:
        src: ./files/prometheus-2.54.1.linux-amd64.tar.gz # Исправлено имя файла
        dest: /tmp/

    - name: Extract Prometheus
      unarchive:
        src: /tmp/prometheus-2.54.1.linux-amd64.tar.gz
        dest: /opt
        remote_src: yes

    - name: Create Prometheus group
      group:
        name: prometheus
        state: present

    - name: Create Prometheus user
      user:
        name: prometheus
        group: prometheus
        createhome: no
        shell: /bin/false

    - name: Set Prometheus directory ownership
      file:
        path: /opt/prometheus-2.54.1.linux-amd64
        owner: prometheus
        group: prometheus
        state: directory
        recurse: yes

    - name: Configure Prometheus
      copy:
        content: |
          global:
            scrape_interval: 15s 
            evaluation_interval: 15s 
            scrape_timeout: 20s  # Увеличено время ожидания
          scrape_configs:
          - job_name: 'prometheus'
            static_configs:
            - targets: ['localhost:9090']

          - job_name: 'node_exporter'
            static_configs:
            - targets: 
              - '{{ apache_server_1 }}:9101' # Изменен порт
              - '{{ apache_server_2 }}:9101'
              - '{{ nginx_load_balancer }}:9101'
              - '{{ mysql_master }}:9101'
              - '{{ mysql_slave }}:9101'
              - '{{ remote_pc }}:9101' # Мониторинг самого сервера Prometheus

          - job_name: 'mysqld_exporter'
            static_configs:
            - targets:
              - '{{ mysql_master }}:9104'
              - '{{ mysql_slave }}:9104'

          - job_name: 'filebeat'
            static_configs:
            - targets:
              - '{{ apache_server_1 }}:5066'
              - '{{ apache_server_2 }}:5066'
              - '{{ nginx_load_balancer }}:5066'
              - '{{ mysql_master }}:5066'
              - '{{ mysql_slave }}:5066'
              - '{{ remote_pc }}:5066'

          - job_name: 'logstash'
            static_configs:
            - targets:
              - '{{ remote_pc }}:9600'

          - job_name: 'elasticsearch'
            static_configs:
            - targets:
              - '{{ remote_pc }}:9200'
        dest: /opt/prometheus-2.54.1.linux-amd64/prometheus.yml

    - name: Create Prometheus service file
      copy:
        content: |
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target

          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/opt/prometheus-2.54.1.linux-amd64/prometheus --config.file /etc/prometheus/prometheus.yml --storage.tsdb.path /var/lib/prometheus/ --web.console.templates=/etc/prometheus/consoles --web.console.libraries=/etc/prometheus/console_libraries

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/prometheus.service

    - name: Enable and start Prometheus service
      systemd:
        name: prometheus
        enabled: yes
        state: started
        daemon_reload: yes

# Установка и настройка Grafana
- hosts: remote_pc
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Add Grafana repository
      apt_repository:
        repo: deb https://packages.grafana.com/oss/deb stable main
        state: present
        update_cache: yes

    - name: Install Grafana
      apt:
        name: grafana
        state: present
        update_cache: yes

    - name: Configure Grafana
      copy:
        content: |
          [server]
          http_port = 3000
          domain = localhost
          root_url = %(protocol)s://%(domain)s:%(http_port)s/
          enforce_domain = true

          [database]
          type = sqlite3
          path = /var/lib/grafana/grafana.db

          [security]
          admin_user = admin
          admin_password = {{ grafana_admin_password }}
          secret_key = {{ lookup('password', '/dev/null chars=ascii_letters length=64') }}

          [users]
          allow_sign_up = false
          auto_assign_org = true
          auto_assign_org_role = Viewer

          [auth]
          disable_login_form = false
          disable_signout_menu = false
          signout_redirect_url = /

          [analytics]
          reporting_enabled = true
          check_for_updates = true

          [dashboards]
          default_home_dashboard_path = /public/dashboards/grafana/node_exporter_full.json
        dest: /etc/grafana/grafana.ini

    - name: Enable and start Grafana service
      systemd:
        name: grafana-server
        enabled: yes
        state: started
        daemon_reload: yes

# Установка и настройка Nginx Load Balancer
- hosts: nginx_load_balancer
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Install Nginx
      apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Configure Nginx as Load Balancer
      copy:
        content: |
          events {
          worker_connections 1024;
          }

          http {
              upstream backend {
                  server {{ apache_server_1 }}:80;
                  server {{ apache_server_2 }}:80;
              }

              server {
                  listen 80;

                  location / {
                      proxy_pass http://backend;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                  }
              }
          }
        dest: /etc/nginx/nginx.conf
      notify: Restart Nginx

    - name: Start Nginx service
      service:
        name: nginx
        state: started
        enabled: true

# Установка и настройка Apache и WordPress
- hosts: apache_servers
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Install Apache and PHP packages
      apt:
        name:
          - apache2
          - php
          - php-mysql
          - libapache2-mod-php
          - php-cli
          - php-curl
          - php-gd
          - php-mbstring
          - php-xml
          - php-xmlrpc
          - php-soap
          - php-intl
          - php-zip
        state: present
        update_cache: yes

    - name: Start Apache2 service
      service:
        name: apache2
        state: started
        enabled: yes

    - name: Download latest WordPress
      get_url:
        url: https://wordpress.org/latest.tar.gz
        dest: /tmp/wordpress.tar.gz

    - name: Extract WordPress
      unarchive:
        src: /tmp/wordpress.tar.gz
        dest: /var/www/html/
        remote_src: yes

    - name: Set permissions for WordPress
      file:
        path: /var/www/html/wordpress
        owner: www-data
        group: www-data
        state: directory
        recurse: yes

    - name: Configure Apache for WordPress
      copy:
        content: |
          <VirtualHost *:80>
          ServerAdmin webmaster@localhost
          DocumentRoot /var/www/html/wordpress
          ServerName {{ wordpress_url }}

          <Directory /var/www/html/wordpress/>
                  Options FollowSymLinks
                  AllowOverride All
                  Require all granted
              </Directory>

              ErrorLog ${APACHE_LOG_DIR}/error.log
              CustomLog ${APACHE_LOG_DIR}/access.log combined
          </VirtualHost>
        dest: /etc/apache2/sites-available/wordpress.conf

    - name: Enable WordPress site
      apache2_module:
        state: present
        name: wordpress.conf

    - name: Disable default Apache site
      apache2_module:
        state: absent
        name: 000-default.conf

    - name: Enable Apache rewrite module
      apache2_module:
        state: present
        name: rewrite

    - name: Configure wp-config.php
      copy:
        content: |
          <?php
          define('DB_NAME', '{{ mysql_db }}');
          define('DB_USER', '{{ wordpress_user }}');
          define('DB_PASSWORD', '{{ wordpress_password }}');
          define('DB_HOST', '{{ mysql_master }}');
          define('DB_CHARSET', 'utf8');
          define('DB_COLLATE', '');

          define('AUTH_KEY',         '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('SECURE_AUTH_KEY',  '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('LOGGED_IN_KEY',    '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('NONCE_KEY',        '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('AUTH_SALT',        '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('SECURE_AUTH_SALT', '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('LOGGED_IN_SALT',   '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');
          define('NONCE_SALT',       '{{ lookup('password', '/dev/null chars=ascii_letters length=64') }}');

          $table_prefix = 'wp_';

          define('WP_DEBUG', false);

          if ( !defined('ABSPATH') )
              define('ABSPATH', dirname(__FILE__) . '/');

          require_once(ABSPATH . 'wp-settings.php');
        dest: /var/www/html/wordpress/wp-config.php

# Установка и настройка MySQL Master
- hosts: mysql_master
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Install MySQL Server
      apt:
        name:
          - mysql-server
          - python3-mysqldb
        state: present
        update_cache: yes

    - name: Configure MySQL for Replication (Master)
      blockinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        create: yes
        block: |
          [mysqld]
          server-id = 1
          log_bin = mysql-bin
          binlog_format = row
          gtid-mode=ON
          enforce-gtid-consistency
          log-replica-updates
          bind-address = 0.0.0.0
      notify: Restart MySQL

    - name: Set MySQL Root Password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        state: present

    - name: Create Backup User
      mysql_user:
        name: "{{ mysql_backup_user }}"
        password: "{{ mysql_backup_password }}"
        host: '%' 
        priv: '.:SELECT, LOCK TABLES, RELOAD, SHOW DATABASES, REPLICATION CLIENT'
        state: present

    - name: Grant REPLICATION SLAVE to backup user (optional, if needed)
      mysql_user:
        name: "{{ mysql_backup_user }}"
        host: '%' 
        priv: '.:REPLICATION SLAVE'
        state: present

    - name: Create WordPress database
      mysql_db:
        name: "{{ mysql_db }}"
        state: present

    - name: Create Replication User
      mysql_user:
        name: "{{ mysql_replication_user }}"
        password: "{{ mysql_replication_password }}"
        host: '%'
        priv: '.:REPLICATION SLAVE,REPLICATION CLIENT'
        state: present

    - name: Create WordPress User
      mysql_user:
        name: "{{ wordpress_user }}"
        password: "{{ wordpress_password }}"
        priv: '{{ mysql_db }}.*:ALL'
        state: present

    - name: Copy Prometheus deb file
      copy:
        src: ./files/mysqld_exporter-0.15.1.linux-amd64.tar.gz # Исправлено имя файла
        dest: /tmp/

    - name: Extract MySQLD Exporter
      unarchive:
        src: /tmp/mysqld_exporter-0.15.1.linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Create MySQLD Exporter service file
      copy:
        content: |
          [Unit]
          Description=MySQLD Exporter
          After=network.target mysqld.service

          [Service]
          User=nobody
          Group=nobody
          Type=simple
          ExecStart=/usr/local/bin/mysqld_exporter # Исправлен путь

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/mysqld_exporter.service

    - name: Enable and start MySQLD Exporter service
      systemd:
        name: mysqld_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Create backup directory
      file:
        path: /tmp/{{ lookup('pipe', 'date +"%Y-%m-%d"') }}
        state: directory

    - name: Create dump of all databases
      shell: "mysqldump --single-transaction --routines --events --triggers --master-data=2 -u {{ mysql_backup_user }} -p{{ mysql_backup_password }} --all-databases | gzip -1 > /tmp/{{ lookup('pipe', 'date +"%Y-%m-%d"') }}/{{ lookup('pipe', 'date +"%Y-%m-%d"') }}.sql.gz"

    - name: Remove old backups
      file:
        path: /tmp/{{ item }}
        state: absent
      with_items:
        - "{{ lookup('pipe', 'find /tmp/ -maxdepth 1 -type d -mtime +7 -print0 | xargs -0 -n1 basename') }}"

# Установка и настройка MySQL Slave
- hosts: mysql_slave
  become: true
  vars_files:
    - vars.yml
  tasks:
    - name: Install MySQL Server
      apt:
        name:
          - mysql-server
          - python3-mysqldb
        state: present
        update_cache: yes

    - name: Set MySQL Root Password
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        host: localhost
        state: present

    - name: Get Master server status 
      mysql_replication:
        mode: getmaster
        login_user: root
        login_password: "{{ mysql_root_password }}"
      register: master_status

    - name: Configure MySQL for Replication (Slave)
      blockinfile:
        path: /etc/mysql/mysql.conf.d/mysqld.cnf
        create: yes
        block: |
          [mysqld]
          server-id = 2
          relay-log = /var/log/mysql/mysql-relay-bin.log
          bind-address = 0.0.0.0
          master_host = {{ mysql_master }} 
          master_port = 3306 
          master_user = {{ mysql_replication_user }}
          master_password = {{ mysql_replication_password }}
          master_log_file = {{ master_status.File }} 
          master_log_pos = {{ master_status.Position }}
      notify: Restart MySQL


    - name: Copy MySQLD Exporter deb file
      copy:
        src: ./files/mysqld_exporter-0.15.1.linux-amd64.tar.gz # Исправлено имя файла
        dest: /tmp/


    - name: Extract MySQLD Exporter
      unarchive:
        src: /tmp/mysqld_exporter-0.15.1.linux-amd64.tar.gz
        dest: /usr/local/bin
        remote_src: yes

    - name: Create MySQLD Exporter service file
      copy:
        content: |
          [Unit]
          Description=MySQLD Exporter
          After=network.target mysqld.service

          [Service]
          User=nobody
          Group=nobody
          Type=simple
          ExecStart=/usr/local/bin/mysqld_exporter # Исправлен путь

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/mysqld_exporter.service

    - name: Enable and start MySQLD Exporter service
      systemd:
        name: mysqld_exporter
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Start Slave
      mysql_replication:
        mode: startslave
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Copy backup script to remote server
      copy:
        src: ./files/backup_mysql.sh
        dest: /tmp/backup_mysql.sh
        mode: '0755'

    - name: Execute backup script
      shell: /tmp/backup_mysql.sh

    - name: Create cron job for MySQL backup
      cron:
        name: "MySQL Backup"
        user: root  # Или другой пользователь, от имени которого нужно запускать бэкап
        minute: "0"  # Минута запуска (0 для начала часа)
        hour: "0"   # Час запуска (0 для полуночи)
        day: "*"    # День месяца
        month: "*"   # Месяц
        weekday: "*"  # День недели
        job: "/tmp/backup_mysql.sh"  # Запуск скрипта бэкапа
        
      
# Обработчики
handlers:
  - name: Restart Filebeat
    systemd:
      name: filebeat
      state: restarted
  - name: Restart Nginx
    service:
      name: nginx
      state: restarted
  - name: Restart Apache
    service:
      name: apache2
      state: restarted
  - name: Restart MySQL
    service:
      name: mysql
      state: restarted
